#!/bin/bash

# URL for the primary database, in the format expected by sqlalchemy (required
# unless linked to a container called 'db')
: ${DATABASE_URL:=}
# URL for solr (required unless linked to a container called 'solr')
: ${SOLR_URL:=}
# Email to which errors should be sent (optional, default: none)
: ${ERROR_EMAIL:=}
# Redis URL
: ${REDIS_URL:=}
# DB URL for the PyCSW Database
: ${PYCSW_DB_URL:=}
: ${CKAN_DEBUG:=}
: ${CKAN_SERVER_NAME:=}

set -eux

CONFIG="${CKAN_CONFIG}/ckan.ini"

abort () {
  echo "$@" >&2
  exit 1
}

update_pycsw_config () {
    echo "Updating PyCSW Config"
    sed -i -e "s&POSTGRES_CONN_STRING&${PYCSW_DB_URL}&" "${CKAN_HOME}/src/pycsw/default.cfg"
}

write_config () {
  local hostinfo=$(echo $REDIS_URL | cut -f3 -d/)
  local redis_host=$(echo $hostinfo | cut -f1 -d:)
  local redis_port=$(echo $hostinfo | cut -f2 -d:)
  local redis_db=$(echo $REDIS_URL | cut -f4 -d/)
  "$CKAN_HOME"/bin/paster make-config ckan "$CONFIG"

  "$CKAN_HOME"/bin/paster --plugin=ckan config-tool "$CONFIG" -e \
      "sqlalchemy.url = ${DATABASE_URL}" \
      "solr_url = ${SOLR_URL}" \
      "ckan.storage_path = /var/lib/ckan" \
      "ckan.site_title = IOOS Catalog" \
      "ckan.site_logo = /ioos_logo.png" \
      "email_to = disabled@example.com" \
      "error_email_from = ckan@$(hostname -f)" \
      "ckan.site_url = ${CKAN_SERVER_NAME}" \
      "ckan.plugins = stats text_view image_view recline_view spatial_metadata spatial_query harvest ckan_harvester csw_harvester waf_harvester ioos_theme"

  sed -i -e "s/\[loggers\]/\n## Message Queue\n\nckan.harvest.mq.type = redis\nckan.harvest.mq.hostname = ${redis_host}\nckan.harvest.mq.port = ${redis_port}\nckan.harvest.mq.redis_db = ${redis_db}\n\n## Spatial\n\nckan.spatial.validator.profiles = iso19139ngdc\n[loggers]/" "$CONFIG"

  if [ -n "$ERROR_EMAIL" ]; then
    sed -i -e "s&^#email_to.*&email_to = ${ERROR_EMAIL}&" "$CONFIG"
  fi
  #sed -i -e "s&WSGIScriptAlias /&WSGIScriptAlias ${prefix}&" /etc/apache2/sites-available/ckan_default.conf
  update_pycsw_config
}

link_redis_url() {
    local host=$REDIS_PORT_6379_TCP_ADDR
    local port=$REDIS_PORT_6379_TCP_PORT
    local db=5
    echo "redis://${host}:${port}/${db}"
}

link_postgres_url () {
  local user=$DB_ENV_POSTGRES_USER
  local pass=$DB_ENV_POSTGRES_PASSWORD
  local db=$DB_ENV_POSTGRES_DB
  local host=$DB_PORT_5432_TCP_ADDR
  local port=$DB_PORT_5432_TCP_PORT
  echo "postgresql://${user}:${pass}@${host}:${port}/${db}"
}

link_pycsw_db_url () {
  local user=$DB_ENV_POSTGRES_USER
  local pass=$DB_ENV_POSTGRES_PASSWORD
  local db=$DB_ENV_POSTGRES_DB
  local host=$DB_PORT_5432_TCP_ADDR
  local port=$DB_PORT_5432_TCP_PORT
  echo "postgresql://${user}:${pass}@${host}:${port}/pycsw"
}

link_solr_url () {
  local host=$SOLR_PORT_8983_TCP_ADDR
  local port=$SOLR_PORT_8983_TCP_PORT
  echo "http://${host}:${port}/solr/ckan"
}

# If we don't already have a config file, bootstrap
if [ ! -e "$CONFIG" ]; then
  if [ -z "$DATABASE_URL" ]; then
    if ! DATABASE_URL=$(link_postgres_url); then
      abort "no DATABASE_URL specified and linked container called 'db' was not found"
    fi
  fi
  if [ -z "$PYCSW_DB_URL" ]; then
    if ! PYCSW_DB_URL=$(link_pycsw_db_url); then
      abort "no PYCSW_DB_URL specified and linked container called 'db' was not found"
    fi
  fi
  if [ -z "$SOLR_URL" ]; then
    if ! SOLR_URL=$(link_solr_url); then
      abort "no SOLR_URL specified and linked container called 'solr' was not found"
    fi
  fi
  if [ -z "$REDIS_URL" ]; then
    if ! REDIS_URL=$(link_redis_url); then
      abort "no REDIS_URL specified and linked container called 'redis' was not found"
    fi
  fi
  if [ -z "$CKAN_SERVER_NAME" ]; then
      CKAN_SERVER_NAME=http://$(hostname -f)/
  fi
  write_config
fi

